// Code generated by "stringer -type=IFDtag"; DO NOT EDIT.

package arw

import "fmt"

const _IFDtag_name = "NewSubFileTypeImageWidthImageHeightBitsPerSampleCompressionPhotometricInterpretationImageDescriptionMakeModelStripOffsetsOrientationSamplesPerPixelRowsPerStripStripByteCountsXResolutionYResolutionPlanarConfigurationResolutionUnitSoftwareDateTimeSubIFDsJPEGInterchangeFormatJPEGInterchangeFormatLengthYCbCrPositioningShotInfoSonyRawFileTypeSonyCurveSR2SubIFDOffsetSR2SubIFDLengthSR2SubIFDKeyIDC_IFDIDC2_IFDMRWInfoCFARepeatPatternDimCFAPattern2ExposureTimeFNumberExifTagExposureProgramSpectralSensitivityGPSTagISOSpeedRatingsOECFSensitivityTypeRecommendedExposureIndexExifVersionDateTimeOriginalDateTimeDigitizedComponentsConfigurationCompressedBitsPerPixelShutterSpeedValueApertureValueBrightnessValueExposureBiasValueMaxApertureValueSubjectDistanceMeteringModeLightSourceFlashFocalLengthSubjectAreaMakerNoteUserCommentSubsecTimeSubsecTimeOriginalSubsecTimeDigitizedTag9400FlashpixVersionColorSpacePixelXDimensionPixelYDimensionRelatedSoundFileInteroperabilityTagFlashEnergySpatialFrequencyResponseFocalPlaneXResolutionFocalPlaneYResolutionFocalPlaneResolutionUnitSubjectLocationExposureIndexSensingMethodFileSourceSceneTypeCFAPatternCustomRenderedExposureModeWhiteBalanceDigitalZoomRatioFocalLengthIn35mmFilmSceneCaptureTypeGainControlContrastSaturationSharpnessDeviceSettingDescriptionSubjectDistanceRangeImageUniqueIDLensSpecificationLensModelFileFormatSonyModelIDCreativeStyleLensSpecFullImageSizePreviewImageSizePrintImageMatchingDNGPrivateData"

var _IFDtag_map = map[IFDtag]string{
	254:   _IFDtag_name[0:14],
	256:   _IFDtag_name[14:24],
	257:   _IFDtag_name[24:35],
	258:   _IFDtag_name[35:48],
	259:   _IFDtag_name[48:59],
	262:   _IFDtag_name[59:84],
	270:   _IFDtag_name[84:100],
	271:   _IFDtag_name[100:104],
	272:   _IFDtag_name[104:109],
	273:   _IFDtag_name[109:121],
	274:   _IFDtag_name[121:132],
	277:   _IFDtag_name[132:147],
	278:   _IFDtag_name[147:159],
	279:   _IFDtag_name[159:174],
	282:   _IFDtag_name[174:185],
	283:   _IFDtag_name[185:196],
	284:   _IFDtag_name[196:215],
	296:   _IFDtag_name[215:229],
	305:   _IFDtag_name[229:237],
	306:   _IFDtag_name[237:245],
	330:   _IFDtag_name[245:252],
	513:   _IFDtag_name[252:273],
	514:   _IFDtag_name[273:300],
	531:   _IFDtag_name[300:316],
	12288: _IFDtag_name[316:324],
	28672: _IFDtag_name[324:339],
	28688: _IFDtag_name[339:348],
	29184: _IFDtag_name[348:363],
	29185: _IFDtag_name[363:378],
	29217: _IFDtag_name[378:390],
	29248: _IFDtag_name[390:397],
	29249: _IFDtag_name[397:405],
	29264: _IFDtag_name[405:412],
	33421: _IFDtag_name[412:431],
	33422: _IFDtag_name[431:442],
	33434: _IFDtag_name[442:454],
	33437: _IFDtag_name[454:461],
	34665: _IFDtag_name[461:468],
	34850: _IFDtag_name[468:483],
	34852: _IFDtag_name[483:502],
	34853: _IFDtag_name[502:508],
	34855: _IFDtag_name[508:523],
	34856: _IFDtag_name[523:527],
	34864: _IFDtag_name[527:542],
	34866: _IFDtag_name[542:566],
	36864: _IFDtag_name[566:577],
	36867: _IFDtag_name[577:593],
	36868: _IFDtag_name[593:610],
	37121: _IFDtag_name[610:633],
	37122: _IFDtag_name[633:655],
	37377: _IFDtag_name[655:672],
	37378: _IFDtag_name[672:685],
	37379: _IFDtag_name[685:700],
	37380: _IFDtag_name[700:717],
	37381: _IFDtag_name[717:733],
	37382: _IFDtag_name[733:748],
	37383: _IFDtag_name[748:760],
	37384: _IFDtag_name[760:771],
	37385: _IFDtag_name[771:776],
	37386: _IFDtag_name[776:787],
	37396: _IFDtag_name[787:798],
	37500: _IFDtag_name[798:807],
	37510: _IFDtag_name[807:818],
	37520: _IFDtag_name[818:828],
	37521: _IFDtag_name[828:846],
	37522: _IFDtag_name[846:865],
	37888: _IFDtag_name[865:872],
	40960: _IFDtag_name[872:887],
	40961: _IFDtag_name[887:897],
	40962: _IFDtag_name[897:912],
	40963: _IFDtag_name[912:927],
	40964: _IFDtag_name[927:943],
	40965: _IFDtag_name[943:962],
	41483: _IFDtag_name[962:973],
	41484: _IFDtag_name[973:997],
	41486: _IFDtag_name[997:1018],
	41487: _IFDtag_name[1018:1039],
	41488: _IFDtag_name[1039:1063],
	41492: _IFDtag_name[1063:1078],
	41493: _IFDtag_name[1078:1091],
	41495: _IFDtag_name[1091:1104],
	41728: _IFDtag_name[1104:1114],
	41729: _IFDtag_name[1114:1123],
	41730: _IFDtag_name[1123:1133],
	41985: _IFDtag_name[1133:1147],
	41986: _IFDtag_name[1147:1159],
	41987: _IFDtag_name[1159:1171],
	41988: _IFDtag_name[1171:1187],
	41989: _IFDtag_name[1187:1208],
	41990: _IFDtag_name[1208:1224],
	41991: _IFDtag_name[1224:1235],
	41992: _IFDtag_name[1235:1243],
	41993: _IFDtag_name[1243:1253],
	41994: _IFDtag_name[1253:1262],
	41995: _IFDtag_name[1262:1286],
	41996: _IFDtag_name[1286:1306],
	42016: _IFDtag_name[1306:1319],
	42034: _IFDtag_name[1319:1336],
	42036: _IFDtag_name[1336:1345],
	45056: _IFDtag_name[1345:1355],
	45057: _IFDtag_name[1355:1366],
	45088: _IFDtag_name[1366:1379],
	45098: _IFDtag_name[1379:1387],
	45099: _IFDtag_name[1387:1400],
	45100: _IFDtag_name[1400:1416],
	50341: _IFDtag_name[1416:1434],
	50740: _IFDtag_name[1434:1448],
}

func (i IFDtag) String() string {
	if str, ok := _IFDtag_map[i]; ok {
		return str
	}
	return fmt.Sprintf("IFDtag(%d)", i)
}
